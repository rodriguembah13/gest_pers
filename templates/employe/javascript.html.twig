<script src = "https://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>
<script type="text/javascript">
    $('#jqtablelist').hide();
    var $sport = $('#employe_departement');
    // When sport gets selected ...
    $sport.change(function() {
        // ... retrieve the corresponding form.
        var $form = $(this).closest('form');
        // Simulate form data, but only include the selected sport value.
        var data = {};
        data[$sport.attr('name')] = $sport.val();
        // Submit data via AJAX to the form's action path.
        $.ajax({
            url : $form.attr('action'),
            type: $form.attr('method'),
            data : data,
            success: function(html) {
                // Replace current position field ...
                $('#employe_poste').replaceWith(
                    // ... with the returned one from the AJAX response.
                    $(html).find('#employe_poste')
                );
                // Position field now displays the appropriate positions.
            },
            error: function (err) {
                alert("An error ocurred while loading data ...");
            }
        });
    });
    function getEmployeId(id) {
        $("#employe_id").val(id);
    }
   /* $('#delete_').click(function () {
        alert($(this).attr("id"));
    })*/
    $('.delete_').click(function () {

       // var id_emp = $(this).data('id');
        $.ajax({
            url: "{{ path('employe_delete_ajax') }}",
            type: "GET",
            dataType: "JSON",
            data: {
                employe_id: $("#employe_id").val(),

            },
            success: function (data) {
$('#close_delete').click();
            },
            error: function (err) {
                alert("An error ocurred while loading data ...");
            }
        });

    })
    $('#employe_departement3').change(function () {
        var citySelector = $(this);

        // Request the neighborhoods of the selected city.
        $.ajax({
            url: "{{ path('posterest') }}",
            type: "GET",
            dataType: "JSON",
            data: {
                cityid: citySelector.val()
            },
            success: function (neighborhoods) {
                var neighborhoodSelect = $("#employe_poste");

                // Remove current options
                neighborhoodSelect.html('');

                // Empty value ...
                neighborhoodSelect.append('<option value> Select a poste of ' + citySelector.find("option:selected").text() + ' ...</option>');


                $.each(neighborhoods, function (key, neighborhood) {
                    neighborhoodSelect.append('<option value="' + neighborhood.id + '">' + neighborhood.libelle + '</option>');
                });
            },
            error: function (err) {
                alert("An error ocurred while loading data ...");
            }
        });
    });
    $(function () {
        //alert("test");

        //$('#employe_departement').hide();
        $('#jqtable_employe').hide();
        $('#jqtable_emplist').click(function () {
            $('#jqtable_employe').show();$('#jqbox_employe').hide();

        });
        $('#jqtable_empbox').click(function () {
            $('#jqtable_employe').hide();
            $('#jqbox_employe').show();
        });//alert("test")
        $('#employe_image').change(function () {
            const preview = $('#img_emp');
            const file = this.files[0];
            const reader = new FileReader();
//alert("test")
            reader.addEventListener("load", function () {
                // convert image file to base64 string
                preview.src = reader.result;
            }, false);

            if (file) {
                reader.readAsDataURL(file);
            }
            //$('#img_emp').attr('src',$('#employe_imageFilename').val());
        });

    });
    $(function () {
        var searchRequest = null;
/*        $("#search").autoComplete({
            source:['aaaacc','derrasss','cdddeeff','kkkkkk','adeaaaa']});*/
        $("#search").keyup(function() {
            var minlength = 3;
            var that = this;
            var value = $(this).val();
            var entitySelector = $("#entitiesNav").html('');
            if (value.length >= minlength ) {
                if (searchRequest != null)
                    searchRequest.abort();
                searchRequest = $.ajax({
                    type: "GET",
                    url: "{{ path('employe_search') }}",
                    data: {
                        'q' : value
                    },
                    dataType: "text",
                    success: function(msg){
                        //we need to check if the value is the same
                        if (value==$(that).val()) {
                            var result = JSON.parse(msg);
                            $.each(result, function(key, arr) {
                                autocomplete(that, arr);
                                $.each(arr, function(id, value) {
                                    /*if (key == 'entities') {
                                        if (id != 'error') {
                                            entitySelector.append('<li><a href="/daten/'+id+'">'+value+'</a></li>');
                                        } else {
                                            entitySelector.append('<li class="errorLi">'+value+'</li>');
                                        }
                                    }*/
                                });
                            });
                        }
                    }
                });
            }
        });
    })
    $(function() {

        var availableTutorials  =  [];
        $.ajax({
            url: "{{ path('employe_search2') }}",
            type: "GET",
            dataType: "JSON",
            data: {
                //cityid: citySelector.val()
            },
            success: function (neighborhoods) {
                //var neighborhoodSelect = $("#employe_poste");
                availableTutorials=neighborhoods;
            },
            error: function (err) {
                alert("An error ocurred while loading data ...");
            }
        });
        $( "#automplete-1" ).autocomplete({
            source: availableTutorials
        });
        autocomplete(document.getElementById("automplete-1"), availableTutorials);
    });

    var countries = ["Afghanistan","Albania","Algeria","Andorra","Angola","Anguilla","Antigua &amp; Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bosnia &amp; Herzegovina","Botswana","Brazil","British Virgin Islands","Brunei","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Cape Verde","Cayman Islands","Central Arfrican Republic","Chad","Chile","China","Colombia","Congo","Cook Islands","Costa Rica","Cote D Ivoire","Croatia","Cuba","Curacao","Cyprus","Czech Republic","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Ethiopia","Falkland Islands","Faroe Islands","Fiji","Finland","France","French Polynesia","French West Indies","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guam","Guatemala","Guernsey","Guinea","Guinea Bissau","Guyana","Haiti","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Kosovo","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macau","Macedonia","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands","Mauritania","Mauritius","Mexico","Micronesia","Moldova","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauro","Nepal","Netherlands","Netherlands Antilles","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","North Korea","Norway","Oman","Pakistan","Palau","Palestine","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Poland","Portugal","Puerto Rico","Qatar","Reunion","Romania","Russia","Rwanda","Saint Pierre &amp; Miquelon","Samoa","San Marino","Sao Tome and Principe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Korea","South Sudan","Spain","Sri Lanka","St Kitts &amp; Nevis","St Lucia","St Vincent","Sudan","Suriname","Swaziland","Sweden","Switzerland","Syria","Taiwan","Tajikistan","Tanzania","Thailand","Timor L'Este","Togo","Tonga","Trinidad &amp; Tobago","Tunisia","Turkey","Turkmenistan","Turks &amp; Caicos","Tuvalu","Uganda","Ukraine","United Arab Emirates","United Kingdom","United States of America","Uruguay","Uzbekistan","Vanuatu","Vatican City","Venezuela","Vietnam","Virgin Islands (US)","Yemen","Zambia","Zimbabwe"];
  //  autocomplete(document.getElementById("automplete-1"), countries);
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function(e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false;}
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function(e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function(e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
</script>
